pipeline {
    agent any

    stages {

        stage('github clone') {
            steps {
                echo 'github clone'
                git branch: 'main', credentialsId: 'Pre-On-Connect', url: 'https://github.com/PreOn-Connect/Post-Service'
            }
        }

        stage('build'){
            steps{
                echo 'Build...' 
                sh 'chmod +x ./gradlew'
                sh './gradlew clean build'
            }   
        }
        stage('test){
            steps{
                echo 'Testing...'
            }
        }

        stage(' build Docker image'){
            steps{
                echo 'Build Docker image...'
                sh 'docker build -t chosuhoon/Post-Service'
            }
        }

        stage('Push Docker image') {
            steps {
                echo 'Pushing to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
                }
                sh 'docker push chosuhoon/Post-Service'
            }
        }

        stage('SSH 접속') {
            steps {
                script {
                    // 원격 서버에 접속하기 위한 SSH 자격 증명 ID를 지정합니다.
                    def sshCredentialsId = '여기에_자격증명_ID_입력'
                    
                    // 원격 서버 주소와 포트를 지정합니다.
                    def remoteServer = '원격_서버_IP_또는_도메인'
                    def remotePort = '22'
                    
                    // SSH 접속 명령을 실행합니다.
                    sh(script: """
                        ssh -p ${remotePort} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -l [원격_서버_사용자] ${remoteServer} 'cd [원격_프로젝트_디렉토리] && [원격_서버_에서_수행할_명령]'
                    """)
                }
            }
        }

        stage('Remove Previous image') {
            steps {
                script {
                    try {
                        h 'docker stop [docker 이미지 이름]'
                        sh 'docker rm [docker 이미지 이름]'
                    } catch (e) {
                        echo 'fail to stop and remove container'
                    }
                }
            }
        }

        stage('Run New image') {
            steps {
                echo 'Run Post Service image...'
                sh 'docker run --name [docker hub 계정]/[docker 이미지 이름] -d -p [포트번호]:[포트번호] [docker hub 계정]/[docker 이미지 이름]'
            }
            
        }

    }

}